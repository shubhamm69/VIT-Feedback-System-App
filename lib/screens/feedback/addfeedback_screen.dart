import 'dart:io';
import 'package:flutter/material.dart';
import 'package:smartcityfeedbacksystem/models/feedback_model.dart';
import 'package:smartcityfeedbacksystem/provider/auth_provider.dart';
import 'package:smartcityfeedbacksystem/services/feedback_services.dart';
import 'package:smartcityfeedbacksystem/utils/image_picker.dart';
import 'package:smartcityfeedbacksystem/utils/snack_bar.dart';
import 'package:smartcityfeedbacksystem/widgets/custom_button.dart';
import 'package:provider/provider.dart';

class AddFeedbackScreen extends StatefulWidget {
  @override
  _AddFeedbackScreenState createState() => _AddFeedbackScreenState();
}

class _AddFeedbackScreenState extends State<AddFeedbackScreen> {
  File? _image;
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _problemController = TextEditingController();
  int _selectedSeverity = 1; // Initialize selected severity with default value
  String _selectedCategory =
      'others'; // Initialize selected category with default value

  List<int> _severityOptions = [1, 2, 3, 4, 5]; // Severity options
  List<String> _categoryOptions = [
    'mess',
    'administration',
    'infrastructure',
    'clubs & events',
    'hostel',
    'academics',
    'others'
  ]; // Category options

  @override
  void dispose() {
    _titleController.dispose();
    _problemController.dispose();
    super.dispose();
  }

  void _selectImage() async {
    File? pickedImage = await pickImage(context);
    if (pickedImage != null) {
      setState(() {
        _image = pickedImage;
      });
    }
  }

  Future<void> _saveFeedback(BuildContext context) async {
    final authProvider = Provider.of<AuthProvider>(context, listen: false);
    final feedbackService = FeedbackService();

    if (_image == null) {
      showSnackBar(context, 'Please select an image for the feedback.');
      return;
    }

    String userId = authProvider.uid;
    String title = _titleController.text.trim();
    String problemFaced = _problemController.text.trim();

    if (title.isEmpty || problemFaced.isEmpty) {
      showSnackBar(context, 'Please fill in all fields.');
      return;
    }

    FeedbackModel feedback = FeedbackModel(
      feedbackId: '', // Placeholder value, will be generated by Firestore
      userId: userId,
      title: title,
      problemFaced: problemFaced,
      imagePath: '',
      upvotes: 0,
      downvotes: 0,
      severity: _selectedSeverity, // Assign selected severity
      category: _selectedCategory, // Assign selected category
    );

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return Dialog(
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                CircularProgressIndicator(),
                SizedBox(width: 16.0),
                Text('Saving feedback...'),
              ],
            ),
          ),
        );
      },
    );

    try {
      String feedbackId = await feedbackService.createFeedback(feedback);

      String imagePath = await feedbackService.storeImage(feedbackId, _image!);

      feedback.imagePath = imagePath;
      feedback.feedbackId =
          feedbackId; // Update the feedback's ID with the generated ID

      await feedbackService.updateFeedback(feedback);

      Navigator.pop(context); // Close the saving feedback dialog

      showSnackBar(context, 'Feedback saved successfully.');

      Navigator.pop(context); // Close the Add Feedback screen
    } catch (e) {
      Navigator.pop(context); // Close the saving feedback dialog
      showSnackBar(context, 'Failed to save feedback. Please try again.');
    }
  }

  Widget _buildSeverityDropdown() {
    return DropdownButtonFormField<int>(
      value: _selectedSeverity,
      onChanged: (newValue) {
        setState(() {
          _selectedSeverity = newValue!;
        });
      },
      items: _severityOptions.map((severity) {
        return DropdownMenuItem<int>(
          value: severity,
          child: Text(severity.toString()),
        );
      }).toList(),
      decoration: InputDecoration(
        labelText: 'Severity',
        hintStyle: TextStyle(
          color: Colors.purple.shade400,
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10),
          borderSide: const BorderSide(color: Colors.transparent),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10),
          borderSide: const BorderSide(color: Colors.transparent),
        ),
        filled: true,
        fillColor: Colors.purple.shade50,
      ),
    );
  }

  Widget _buildCategoryDropdown() {
    return DropdownButtonFormField<String>(
      value: _selectedCategory,
      onChanged: (newValue) {
        setState(() {
          _selectedCategory = newValue!;
        });
      },
      items: _categoryOptions.map((category) {
        return DropdownMenuItem<String>(
          value: category,
          child: Text(category),
        );
      }).toList(),
      decoration: InputDecoration(
        labelText: 'Category',
        hintStyle: TextStyle(
          color: Colors.purple.shade400,
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10),
          borderSide: const BorderSide(color: Colors.transparent),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10),
          borderSide: const BorderSide(color: Colors.transparent),
        ),
        filled: true,
        fillColor: Colors.purple.shade50,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.purple,
        title: Text('Add Feedback'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            GestureDetector(
              onTap: _selectImage,
              child: Container(
                width: double.infinity,
                height: 200,
                decoration: BoxDecoration(
                  color: Colors.purple.shade50,
                  border: Border.all(
                    color: Colors.purple.shade200,
                    width: 2.0,
                  ),
                  borderRadius: BorderRadius.circular(8.0),
                  image: _image != null
                      ? DecorationImage(
                          image: FileImage(_image!),
                          fit: BoxFit.cover,
                        )
                      : null,
                ),
                child: _image == null
                    ? const Icon(
                        Icons.image,
                        size: 50,
                        color: Colors.purple,
                      )
                    : null,
              ),
            ),
            const SizedBox(height: 16.0),
            TextFormField(
              controller: _titleController,
              style: const TextStyle(
                color: Colors.purple,
              ),
              decoration: InputDecoration(
                labelText: 'Title',
                hintStyle: TextStyle(
                  color: Colors.purple.shade400,
                ),
                enabledBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10),
                  borderSide: const BorderSide(color: Colors.transparent),
                ),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10),
                  borderSide: const BorderSide(color: Colors.transparent),
                ),
                filled: true,
                fillColor: Colors.purple.shade50,
              ),
            ),
            const SizedBox(height: 16.0),
            TextFormField(
              controller: _problemController,
              maxLines: 5,
              style: const TextStyle(
                color: Colors.purple,
              ),
              decoration: InputDecoration(
                labelText: 'Problem Faced',
                hintStyle: TextStyle(
                  color: Colors.purple.shade400,
                ),
                enabledBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10),
                  borderSide: const BorderSide(color: Colors.transparent),
                ),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(10),
                  borderSide: const BorderSide(color: Colors.transparent),
                ),
                filled: true,
                fillColor: Colors.purple.shade50,
              ),
            ),
            const SizedBox(height: 16.0),
            _buildSeverityDropdown(), // Add severity dropdown
            const SizedBox(height: 16.0),
            _buildCategoryDropdown(), // Add category dropdown
            const SizedBox(height: 16.0),
            CustomButton(
              text: 'Save Feedback',
              onPressed: () => _saveFeedback(context),
            ),
          ],
        ),
      ),
    );
  }
}
